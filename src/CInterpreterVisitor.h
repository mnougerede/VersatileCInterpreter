//
// Created by max on 04/02/25.
//
#pragma once

#include "CBaseVisitor.h"  // Generated by ANTLR from your grammar (C.g4)
#include "Environment.h"
#include <unordered_map>
#include <string>
#include <any>

class CInterpreterVisitor : public CBaseVisitor {

public:
    CInterpreterVisitor(Environment* env);
    virtual ~CInterpreterVisitor();

    std::any visitEvaluateExpression(CParser::EvaluateExpressionContext *ctx) override;
    std::any visitAddSubExpression(CParser::AddSubExpressionContext *ctx) override;
    std::any visitMulDivExpression(CParser::MulDivExpressionContext *ctx) override;
    std::any visitParenthesizedExpression(CParser::ParenthesizedExpressionContext *ctx) override;
    std::any visitUnaryMinusExpression(CParser::UnaryMinusExpressionContext *ctx) override;
    std::any visitVariableReference(CParser::VariableReferenceContext *ctx) override;
    std::any visitDeclareVariable(CParser::DeclareVariableContext *ctx) override;
    std::any visitNumberLiteral(CParser::NumberLiteralContext *ctx) override;
    std::any visitCharLiteral(CParser::CharLiteralContext *ctx) override;
    std::any aggregateResult(std::any aggregate, std::any nextResult) override;

    std::any visitLogicalOrExpression(CParser::LogicalOrExpressionContext *ctx) override;

    std::any visitLogicalAndExpression(CParser::LogicalAndExpressionContext *ctx) override;

    std::any visitEqualityExpression(CParser::EqualityExpressionContext *ctx) override;

    std::any visitRelationalExpression(CParser::RelationalExpressionContext *ctx) override;

    std::any visitLogicalNotExpression(CParser::LogicalNotExpressionContext *ctx) override;

    std::any visitAssignmentExpr(CParser::AssignmentExprContext *ctx) override;

private:
    Environment* env;
};




